{
 "Resources": {
  "CWWorkshopImagesF0DA5E9F": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "APIStack/CW-Workshop-Images/Resource"
   }
  },
  "CWWorkshopImagesNotificationsADBAED03": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "CWWorkshopImagesF0DA5E9F"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:Put"
       ],
       "TopicArn": {
        "Ref": "uploadedimagetopic9EF836CA"
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "uploadedimagetopicPolicy80F4BA70",
    "uploadedimagetopic9EF836CA"
   ],
   "Metadata": {
    "aws:cdk:path": "APIStack/CW-Workshop-Images/Notifications/Resource"
   }
  },
  "requestslayerBEFAAC3C": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.11"
    ],
    "Content": {
     "S3Bucket": "lab-resources-d41cfee0",
     "S3Key": "requests_layer3_11.zip"
    },
    "LayerName": "requests_layer"
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/requests_layer/Resource"
   }
  },
  "ImageGetAndSaveLambdaD4989ABD": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "e1c65aff9d91856dd8fca7b3fbb5d2c6d24f2a146787608fef8d7ffa4162eed8.zip"
    },
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "CWWorkshopImagesF0DA5E9F"
      }
     }
    },
    "FunctionName": "ImageGetAndSaveLambda",
    "Handler": "get_save_image.handler",
    "Layers": [
     {
      "Ref": "requestslayerBEFAAC3C"
     }
    ],
    "Role": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":iam::",
       {
        "Ref": "AWS::AccountId"
       },
       ":role/cdk-apistack-role"
      ]
     ]
    },
    "Runtime": "python3.11"
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/ImageGetAndSaveLambda/Resource",
    "aws:asset:path": "asset.e1c65aff9d91856dd8fca7b3fbb5d2c6d24f2a146787608fef8d7ffa4162eed8",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "RESTAPI561F5063": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Description": "CW workshop - upload image for workshop.",
    "Name": "Image Upload Service"
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/Resource"
   }
  },
  "RESTAPIDeployment929885702852626a3f4d864511a4e936eb1e6fb5": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "CW workshop - upload image for workshop.",
    "RestApiId": {
     "Ref": "RESTAPI561F5063"
    }
   },
   "DependsOn": [
    "RESTAPIGET45321992"
   ],
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/Deployment/Resource"
   }
  },
  "RESTAPIDeploymentStageprod97809C34": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "RESTAPIDeployment929885702852626a3f4d864511a4e936eb1e6fb5"
    },
    "RestApiId": {
     "Ref": "RESTAPI561F5063"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/DeploymentStage.prod/Resource"
   }
  },
  "RESTAPIGETApiPermissionAPIStackRESTAPI4904C8F9GET034CFEBF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ImageGetAndSaveLambdaD4989ABD",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RESTAPI561F5063"
       },
       "/",
       {
        "Ref": "RESTAPIDeploymentStageprod97809C34"
       },
       "/GET/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/Default/GET/ApiPermission.APIStackRESTAPI4904C8F9.GET.."
   }
  },
  "RESTAPIGETApiPermissionTestAPIStackRESTAPI4904C8F9GET31DCD434": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ImageGetAndSaveLambdaD4989ABD",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RESTAPI561F5063"
       },
       "/test-invoke-stage/GET/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/Default/GET/ApiPermission.Test.APIStackRESTAPI4904C8F9.GET.."
   }
  },
  "RESTAPIGET45321992": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "RequestTemplates": {
      "application/json": "{ \"statusCode\": \"200\" }"
     },
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ImageGetAndSaveLambdaD4989ABD",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "RESTAPI561F5063",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "RESTAPI561F5063"
    }
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/REST_API/Default/GET/Resource"
   }
  },
  "uploadedimagequeue43D6CD3D": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "VisibilityTimeout": 30
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "APIStack/uploaded_image_queue/Resource"
   }
  },
  "uploadedimagequeuePolicyDB7BBA50": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "uploadedimagetopic9EF836CA"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "uploadedimagequeue43D6CD3D",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "uploadedimagequeue43D6CD3D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/uploaded_image_queue/Policy/Resource"
   }
  },
  "uploadedimagequeueAPIStackuploadedimagetopic18C46AFD2B4F2161": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": {
     "Fn::GetAtt": [
      "uploadedimagequeue43D6CD3D",
      "Arn"
     ]
    },
    "Protocol": "sqs",
    "RawMessageDelivery": true,
    "TopicArn": {
     "Ref": "uploadedimagetopic9EF836CA"
    }
   },
   "DependsOn": [
    "uploadedimagequeuePolicyDB7BBA50"
   ],
   "Metadata": {
    "aws:cdk:path": "APIStack/uploaded_image_queue/APIStackuploadedimagetopic18C46AFD/Resource"
   }
  },
  "uploadedimagetopic9EF836CA": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "APIStack/uploaded_image_topic/Resource"
   }
  },
  "uploadedimagetopicPolicy80F4BA70": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "CWWorkshopImagesF0DA5E9F",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "uploadedimagetopic9EF836CA"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "uploadedimagetopic9EF836CA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/uploaded_image_topic/Policy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":iam::",
       {
        "Ref": "AWS::AccountId"
       },
       ":role/cdk-apistack-role"
      ]
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPQW6DMBB8S+7GLUWqck1a9dSqlFS9RsZs6BawKWsrQpb/XoxJSi67M+NZa+aBp+mW32/EmRJZNUmLJXcHI2TDJunoKONub2UDhj2d1ILi2gsCz1rRlZXg7lWMMHzBQKhVsN7wF6ukWR7WOIehQwoWz1B0vNAtMMqOgggM8V1YTPRYCwNnMXJXAJldj+H2Ap+hb/XYgZoTrtjUooagRTD5tR0khNjsDcy3rsJjRJ7RL3H3YcHOJxHMM9ctyvEqRjr51eQ/2JLkgP2lzw3/1D3KoEYwz//PVtT7pc+c7xqUzfVDeFR1cLxb01vjWT5OkdVdxrc8fdz8EGIyWGWwA17E/Qd0gjzd1gEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "APIStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "RESTAPIEndpoint0F9F3858": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "RESTAPI561F5063"
      },
      ".execute-api.us-east-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "RESTAPIDeploymentStageprod97809C34"
      },
      "/"
     ]
    ]
   }
  },
  "ExportsOutputRefuploadedimagequeue43D6CD3DC3CB92B0": {
   "Value": {
    "Ref": "uploadedimagequeue43D6CD3D"
   },
   "Export": {
    "Name": "APIStack:ExportsOutputRefuploadedimagequeue43D6CD3DC3CB92B0"
   }
  },
  "ExportsOutputFnGetAttuploadedimagequeue43D6CD3DArnCB5DD7AB": {
   "Value": {
    "Fn::GetAtt": [
     "uploadedimagequeue43D6CD3D",
     "Arn"
    ]
   },
   "Export": {
    "Name": "APIStack:ExportsOutputFnGetAttuploadedimagequeue43D6CD3DArnCB5DD7AB"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}